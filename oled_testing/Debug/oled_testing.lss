
oled_testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000974  00000a08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000974  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800116  00800116  00000a1e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013de  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096b  00000000  00000000  00001f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082a  00000000  00000000  000028e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  0000310c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000503  00000000  00000000  000033ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c93  00000000  00000000  000038af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00004542  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 84 01 	jmp	0x308	; 0x308 <__ctors_end>
   4:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
   8:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
   c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  10:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  14:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  18:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  1c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  20:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  24:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  28:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  2c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  30:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  34:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  38:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  3c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  40:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  44:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  48:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  4c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  50:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  54:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  58:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  5c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  60:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  64:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	bc 5f       	subi	r27, 0xFC	; 252
  6a:	9c 60       	ori	r25, 0x0C	; 12
  6c:	a4 61       	ori	r26, 0x14	; 20
  6e:	84 62       	ori	r24, 0x24	; 36
  70:	b6 63       	ori	r27, 0x36	; 54
  72:	96 64       	ori	r25, 0x46	; 70
  74:	b0 65       	ori	r27, 0x50	; 80
  76:	9f 66       	ori	r25, 0x6F	; 111
  78:	b5 67       	ori	r27, 0x75	; 117
  7a:	ff ff       	.word	0xffff	; ????

0000007c <ssd1306oled_font>:
	...
  84:	00 2f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14     ./..............
  94:	00 24 2a 7f 2a 12 00 62 64 08 13 23 00 36 49 55     .$*.*..bd..#.6IU
  a4:	22 50 00 00 05 03 00 00 00 00 1c 22 41 00 00 00     "P........."A...
  b4:	41 22 1c 00 00 14 08 3e 08 14 00 08 08 3e 08 08     A".....>.....>..
  c4:	00 00 00 a0 60 00 00 08 08 08 08 08 00 00 60 60     ....`.........``
  d4:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
  e4:	42 7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31     B.@..BaQIF.!AEK1
  f4:	00 18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49     .......'EEE9.<JI
 104:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
 114:	49 49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00     II)...66....V6..
 124:	00 08 14 22 41 00 00 14 14 14 14 14 00 00 41 22     ..."A.........A"
 134:	14 08 00 02 01 51 09 06 00 32 49 59 51 3e 00 7c     .....Q...2IYQ>.|
 144:	12 11 12 7c 00 7f 49 49 49 36 00 3e 41 41 41 22     ...|..III6.>AAA"
 154:	00 7f 41 41 22 1c 00 7f 49 49 49 41 00 7f 09 09     ..AA"...IIIA....
 164:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
 174:	41 7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41     A.A.. @A?....."A
 184:	00 7f 40 40 40 40 00 7f 02 0c 02 7f 00 7f 04 08     ..@@@@..........
 194:	10 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
 1a4:	41 51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31     AQ!^....)F.FIII1
 1b4:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
 1c4:	20 1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 07      ..?@8@?.c...c..
 1d4:	08 70 08 07 00 61 51 49 45 43 00 00 7f 41 41 00     .p...aQIEC...AA.
 1e4:	00 55 2a 55 2a 55 00 00 41 41 7f 00 00 04 02 01     .U*U*U..AA......
 1f4:	02 04 00 40 40 40 40 40 00 00 01 02 04 00 00 20     ...@@@@@....... 
 204:	54 54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20     TTTx..HDD8.8DDD 
 214:	00 38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09     .8DDH..8TTT...~.
 224:	01 02 00 18 a4 a4 a4 7c 00 7f 08 04 04 78 00 00     .......|.....x..
 234:	44 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     D}@..@..}....(D.
 244:	00 00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04     ..A.@..|...x.|..
 254:	04 78 00 38 44 44 44 38 00 fc 24 24 24 18 00 18     .x.8DDD8..$$$...
 264:	24 24 18 fc 00 7c 08 04 04 08 00 48 54 54 54 20     $$...|.....HTTT 
 274:	00 04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40     ..?D@ .<@@ |.. @
 284:	20 1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 1c      ..<@0@<.D(.(D..
 294:	a0 a0 a0 7c 00 44 64 54 4c 44 00 00 08 77 41 00     ...|.DdTLD...wA.
 2a4:	00 00 00 63 00 00 00 00 41 77 08 00 00 08 04 08     ...c....Aw......
 2b4:	08 04 00 3a 40 40 20 7a 00 3d 40 40 40 3d 00 21     ...:@@ z.=@@@=.!
 2c4:	54 54 54 79 00 7d 12 11 12 7d 00 39 44 44 44 39     TTTy.}...}.9DDD9
 2d4:	00 3d 42 42 42 3d 00 02 05 02 00 00 00 7e 01 49     .=BBB=.......~.I
 2e4:	55 73 00 7c 10 10 08 1c                             Us.|....

000002ec <init_sequence>:
 2ec:	ae 20 00 b0 c8 00 10 40 81 3f a1 a6 a8 3f a4 d3     . .....@.?...?..
 2fc:	00 d5 f0 d9 22 da 12 db 20 8d 14 00                 ...."... ...

00000308 <__ctors_end>:
 308:	11 24       	eor	r1, r1
 30a:	1f be       	out	0x3f, r1	; 63
 30c:	cf ef       	ldi	r28, 0xFF	; 255
 30e:	d8 e0       	ldi	r29, 0x08	; 8
 310:	de bf       	out	0x3e, r29	; 62
 312:	cd bf       	out	0x3d, r28	; 61

00000314 <__do_copy_data>:
 314:	11 e0       	ldi	r17, 0x01	; 1
 316:	a0 e0       	ldi	r26, 0x00	; 0
 318:	b1 e0       	ldi	r27, 0x01	; 1
 31a:	e4 e7       	ldi	r30, 0x74	; 116
 31c:	f9 e0       	ldi	r31, 0x09	; 9
 31e:	02 c0       	rjmp	.+4      	; 0x324 <__do_copy_data+0x10>
 320:	05 90       	lpm	r0, Z+
 322:	0d 92       	st	X+, r0
 324:	a6 31       	cpi	r26, 0x16	; 22
 326:	b1 07       	cpc	r27, r17
 328:	d9 f7       	brne	.-10     	; 0x320 <__do_copy_data+0xc>

0000032a <__do_clear_bss>:
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	a6 e1       	ldi	r26, 0x16	; 22
 32e:	b1 e0       	ldi	r27, 0x01	; 1
 330:	01 c0       	rjmp	.+2      	; 0x334 <.do_clear_bss_start>

00000332 <.do_clear_bss_loop>:
 332:	1d 92       	st	X+, r1

00000334 <.do_clear_bss_start>:
 334:	a9 31       	cpi	r26, 0x19	; 25
 336:	b2 07       	cpc	r27, r18
 338:	e1 f7       	brne	.-8      	; 0x332 <.do_clear_bss_loop>
 33a:	0e 94 99 04 	call	0x932	; 0x932 <main>
 33e:	0c 94 b8 04 	jmp	0x970	; 0x970 <_exit>

00000342 <__bad_interrupt>:
 342:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000346 <i2c_init>:
            break;
        case 64:
            TWSR = 0x3;
            break;
        default:
            TWSR = 0x00;
 346:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
            break;
    }
    TWBR = (uint8_t)SET_TWBR;
 34a:	80 e2       	ldi	r24, 0x20	; 32
 34c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    // enable
    TWCR = (1 << TWEN);
 350:	84 e0       	ldi	r24, 0x04	; 4
 352:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 356:	08 95       	ret

00000358 <i2c_start>:
 
 Return Value: none
 **********************************************/
void i2c_start(uint8_t i2c_addr){
    // i2c start
    TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
 358:	94 ea       	ldi	r25, 0xA4	; 164
 35a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	uint16_t timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
 35e:	20 ea       	ldi	r18, 0xA0	; 160
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	ec eb       	ldi	r30, 0xBC	; 188
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	09 c0       	rjmp	.+18     	; 0x37a <i2c_start+0x22>
 368:	21 50       	subi	r18, 0x01	; 1
 36a:	31 09       	sbc	r19, r1
		timeout !=0){
		timeout--;
		if(timeout == 0){
 36c:	31 f4       	brne	.+12     	; 0x37a <i2c_start+0x22>
			I2C_ErrorCode |= (1 << I2C_START);
 36e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_ErrorCode>
 372:	81 60       	ori	r24, 0x01	; 1
 374:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <I2C_ErrorCode>
			return;
 378:	08 95       	ret
 **********************************************/
void i2c_start(uint8_t i2c_addr){
    // i2c start
    TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
	uint16_t timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
 37a:	90 81       	ld	r25, Z
 37c:	99 23       	and	r25, r25
 37e:	a4 f7       	brge	.-24     	; 0x368 <i2c_start+0x10>
			I2C_ErrorCode |= (1 << I2C_START);
			return;
		}
	};
    // send adress
    TWDR = i2c_addr;
 380:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = (1 << TWINT)|( 1 << TWEN);
 384:	84 e8       	ldi	r24, 0x84	; 132
 386:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
 38a:	80 ea       	ldi	r24, 0xA0	; 160
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	ec eb       	ldi	r30, 0xBC	; 188
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	08 c0       	rjmp	.+16     	; 0x3a4 <i2c_start+0x4c>
 394:	01 97       	sbiw	r24, 0x01	; 1
		  timeout !=0){
		timeout--;
		if(timeout == 0){
 396:	31 f4       	brne	.+12     	; 0x3a4 <i2c_start+0x4c>
			I2C_ErrorCode |= (1 << I2C_SENDADRESS);
 398:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_ErrorCode>
 39c:	82 60       	ori	r24, 0x02	; 2
 39e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <I2C_ErrorCode>
			return;
 3a2:	08 95       	ret
	};
    // send adress
    TWDR = i2c_addr;
    TWCR = (1 << TWINT)|( 1 << TWEN);
    timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
 3a4:	20 81       	ld	r18, Z
 3a6:	22 23       	and	r18, r18
 3a8:	ac f7       	brge	.-22     	; 0x394 <i2c_start+0x3c>
 3aa:	08 95       	ret

000003ac <i2c_stop>:
 
 Return Value: none
 **********************************************/
void i2c_stop(void){
    // i2c stop
    TWCR = (1 << TWINT)|(1 << TWSTO)|(1 << TWEN);
 3ac:	84 e9       	ldi	r24, 0x94	; 148
 3ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 3b2:	08 95       	ret

000003b4 <i2c_byte>:
 - uint8_t byte: Byte to send to reciever
 
 Return Value: none
 **********************************************/
void i2c_byte(uint8_t byte){
    TWDR = byte;
 3b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = (1 << TWINT)|( 1 << TWEN);
 3b8:	84 e8       	ldi	r24, 0x84	; 132
 3ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    uint16_t timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
 3be:	80 ea       	ldi	r24, 0xA0	; 160
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	ec eb       	ldi	r30, 0xBC	; 188
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	08 c0       	rjmp	.+16     	; 0x3d8 <i2c_byte+0x24>
 3c8:	01 97       	sbiw	r24, 0x01	; 1
		  timeout !=0){
		timeout--;
		if(timeout == 0){
 3ca:	31 f4       	brne	.+12     	; 0x3d8 <i2c_byte+0x24>
			I2C_ErrorCode |= (1 << I2C_BYTE);
 3cc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_ErrorCode>
 3d0:	84 60       	ori	r24, 0x04	; 4
 3d2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <I2C_ErrorCode>
			return;
 3d6:	08 95       	ret
 **********************************************/
void i2c_byte(uint8_t byte){
    TWDR = byte;
    TWCR = (1 << TWINT)|( 1 << TWEN);
    uint16_t timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
 3d8:	20 81       	ld	r18, Z
 3da:	22 23       	and	r18, r18
 3dc:	ac f7       	brge	.-22     	; 0x3c8 <i2c_byte+0x14>
 3de:	08 95       	ret

000003e0 <lcd_command>:
        commandSequence[0] = 0xAF;
    } else {
        commandSequence[0] = 0xAE;
    }
    lcd_command(commandSequence, 1);
}
 3e0:	ef 92       	push	r14
 3e2:	ff 92       	push	r15
 3e4:	0f 93       	push	r16
 3e6:	1f 93       	push	r17
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	7c 01       	movw	r14, r24
 3ee:	16 2f       	mov	r17, r22
 3f0:	88 e7       	ldi	r24, 0x78	; 120
 3f2:	0e 94 ac 01 	call	0x358	; 0x358 <i2c_start>
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <i2c_byte>
 3fc:	11 23       	and	r17, r17
 3fe:	71 f0       	breq	.+28     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 400:	e7 01       	movw	r28, r14
 402:	11 50       	subi	r17, 0x01	; 1
 404:	01 2f       	mov	r16, r17
 406:	10 e0       	ldi	r17, 0x00	; 0
 408:	0f 5f       	subi	r16, 0xFF	; 255
 40a:	1f 4f       	sbci	r17, 0xFF	; 255
 40c:	0e 0d       	add	r16, r14
 40e:	1f 1d       	adc	r17, r15
 410:	89 91       	ld	r24, Y+
 412:	0e 94 da 01 	call	0x3b4	; 0x3b4 <i2c_byte>
 416:	c0 17       	cp	r28, r16
 418:	d1 07       	cpc	r29, r17
 41a:	d1 f7       	brne	.-12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 41c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c_stop>
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	ff 90       	pop	r15
 42a:	ef 90       	pop	r14
 42c:	08 95       	ret

0000042e <lcd_data>:
 42e:	ef 92       	push	r14
 430:	ff 92       	push	r15
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	7c 01       	movw	r14, r24
 43c:	8b 01       	movw	r16, r22
 43e:	88 e7       	ldi	r24, 0x78	; 120
 440:	0e 94 ac 01 	call	0x358	; 0x358 <i2c_start>
 444:	80 e4       	ldi	r24, 0x40	; 64
 446:	0e 94 da 01 	call	0x3b4	; 0x3b4 <i2c_byte>
 44a:	01 15       	cp	r16, r1
 44c:	11 05       	cpc	r17, r1
 44e:	49 f0       	breq	.+18     	; 0x462 <lcd_data+0x34>
 450:	e7 01       	movw	r28, r14
 452:	0e 0d       	add	r16, r14
 454:	1f 1d       	adc	r17, r15
 456:	89 91       	ld	r24, Y+
 458:	0e 94 da 01 	call	0x3b4	; 0x3b4 <i2c_byte>
 45c:	c0 17       	cp	r28, r16
 45e:	d1 07       	cpc	r29, r17
 460:	d1 f7       	brne	.-12     	; 0x456 <lcd_data+0x28>
 462:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c_stop>
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	ff 90       	pop	r15
 470:	ef 90       	pop	r14
 472:	08 95       	ret

00000474 <lcd_goto_xpix_y>:
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	00 d0       	rcall	.+0      	; 0x47a <lcd_goto_xpix_y+0x6>
 47a:	00 d0       	rcall	.+0      	; 0x47c <lcd_goto_xpix_y+0x8>
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
 480:	81 38       	cpi	r24, 0x81	; 129
 482:	90 f4       	brcc	.+36     	; 0x4a8 <lcd_goto_xpix_y+0x34>
 484:	68 30       	cpi	r22, 0x08	; 8
 486:	80 f4       	brcc	.+32     	; 0x4a8 <lcd_goto_xpix_y+0x34>
 488:	e6 e1       	ldi	r30, 0x16	; 22
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	80 83       	st	Z, r24
 48e:	61 83       	std	Z+1, r22	; 0x01
 490:	60 55       	subi	r22, 0x50	; 80
 492:	69 83       	std	Y+1, r22	; 0x01
 494:	91 e2       	ldi	r25, 0x21	; 33
 496:	9a 83       	std	Y+2, r25	; 0x02
 498:	8b 83       	std	Y+3, r24	; 0x03
 49a:	8f e7       	ldi	r24, 0x7F	; 127
 49c:	8c 83       	std	Y+4, r24	; 0x04
 49e:	64 e0       	ldi	r22, 0x04	; 4
 4a0:	ce 01       	movw	r24, r28
 4a2:	01 96       	adiw	r24, 0x01	; 1
 4a4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_command>
 4a8:	0f 90       	pop	r0
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	08 95       	ret

000004b6 <lcd_gotoxy>:
 4b6:	98 2f       	mov	r25, r24
 4b8:	99 0f       	add	r25, r25
 4ba:	89 0f       	add	r24, r25
 4bc:	88 0f       	add	r24, r24
 4be:	0e 94 3a 02 	call	0x474	; 0x474 <lcd_goto_xpix_y>
 4c2:	08 95       	ret

000004c4 <lcd_home>:
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
 4cc:	08 95       	ret

000004ce <lcd_clrscr>:
 4ce:	1f 93       	push	r17
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	cd b7       	in	r28, 0x3d	; 61
 4d6:	de b7       	in	r29, 0x3e	; 62
 4d8:	c0 58       	subi	r28, 0x80	; 128
 4da:	d1 09       	sbc	r29, r1
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	f8 94       	cli
 4e0:	de bf       	out	0x3e, r29	; 62
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	cd bf       	out	0x3d, r28	; 61
 4e6:	fe 01       	movw	r30, r28
 4e8:	31 96       	adiw	r30, 0x01	; 1
 4ea:	80 e8       	ldi	r24, 0x80	; 128
 4ec:	df 01       	movw	r26, r30
 4ee:	1d 92       	st	X+, r1
 4f0:	8a 95       	dec	r24
 4f2:	e9 f7       	brne	.-6      	; 0x4ee <lcd_clrscr+0x20>
 4f4:	10 e0       	ldi	r17, 0x00	; 0
 4f6:	61 2f       	mov	r22, r17
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
 4fe:	60 e8       	ldi	r22, 0x80	; 128
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	ce 01       	movw	r24, r28
 504:	01 96       	adiw	r24, 0x01	; 1
 506:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_data>
 50a:	1f 5f       	subi	r17, 0xFF	; 255
 50c:	18 30       	cpi	r17, 0x08	; 8
 50e:	99 f7       	brne	.-26     	; 0x4f6 <lcd_clrscr+0x28>
 510:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_home>
 514:	c0 58       	subi	r28, 0x80	; 128
 516:	df 4f       	sbci	r29, 0xFF	; 255
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	de bf       	out	0x3e, r29	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	cd bf       	out	0x3d, r28	; 61
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	1f 91       	pop	r17
 528:	08 95       	ret

0000052a <lcd_init>:
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	cd b7       	in	r28, 0x3d	; 61
 532:	de b7       	in	r29, 0x3e	; 62
 534:	6c 97       	sbiw	r28, 0x1c	; 28
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	f8 94       	cli
 53a:	de bf       	out	0x3e, r29	; 62
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	18 2f       	mov	r17, r24
 542:	0e 94 a3 01 	call	0x346	; 0x346 <i2c_init>
 546:	ec ee       	ldi	r30, 0xEC	; 236
 548:	f2 e0       	ldi	r31, 0x02	; 2
 54a:	de 01       	movw	r26, r28
 54c:	11 96       	adiw	r26, 0x01	; 1
 54e:	9e 01       	movw	r18, r28
 550:	24 5e       	subi	r18, 0xE4	; 228
 552:	3f 4f       	sbci	r19, 0xFF	; 255
 554:	84 91       	lpm	r24, Z
 556:	8d 93       	st	X+, r24
 558:	31 96       	adiw	r30, 0x01	; 1
 55a:	a2 17       	cp	r26, r18
 55c:	b3 07       	cpc	r27, r19
 55e:	d1 f7       	brne	.-12     	; 0x554 <lcd_init+0x2a>
 560:	1c 8f       	std	Y+28, r17	; 0x1c
 562:	6c e1       	ldi	r22, 0x1C	; 28
 564:	ce 01       	movw	r24, r28
 566:	01 96       	adiw	r24, 0x01	; 1
 568:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_command>
 56c:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_clrscr>
 570:	6c 96       	adiw	r28, 0x1c	; 28
 572:	0f b6       	in	r0, 0x3f	; 63
 574:	f8 94       	cli
 576:	de bf       	out	0x3e, r29	; 62
 578:	0f be       	out	0x3f, r0	; 63
 57a:	cd bf       	out	0x3d, r28	; 61
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	1f 91       	pop	r17
 582:	08 95       	ret

00000584 <lcd_set_contrast>:
void lcd_set_contrast(uint8_t contrast){
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	00 d0       	rcall	.+0      	; 0x58a <lcd_set_contrast+0x6>
 58a:	cd b7       	in	r28, 0x3d	; 61
 58c:	de b7       	in	r29, 0x3e	; 62
    uint8_t commandSequence[2] = {0x81, contrast};
 58e:	91 e8       	ldi	r25, 0x81	; 129
 590:	99 83       	std	Y+1, r25	; 0x01
 592:	8a 83       	std	Y+2, r24	; 0x02
    lcd_command(commandSequence, sizeof(commandSequence));
 594:	62 e0       	ldi	r22, 0x02	; 2
 596:	ce 01       	movw	r24, r28
 598:	01 96       	adiw	r24, 0x01	; 1
 59a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_command>
}
 59e:	0f 90       	pop	r0
 5a0:	0f 90       	pop	r0
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	08 95       	ret

000005a8 <lcd_putc>:
void lcd_putc(char c){
 5a8:	6f 92       	push	r6
 5aa:	7f 92       	push	r7
 5ac:	8f 92       	push	r8
 5ae:	9f 92       	push	r9
 5b0:	af 92       	push	r10
 5b2:	bf 92       	push	r11
 5b4:	cf 92       	push	r12
 5b6:	df 92       	push	r13
 5b8:	ef 92       	push	r14
 5ba:	ff 92       	push	r15
 5bc:	0f 93       	push	r16
 5be:	1f 93       	push	r17
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
 5c8:	6c 97       	sbiw	r28, 0x1c	; 28
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	f8 94       	cli
 5ce:	de bf       	out	0x3e, r29	; 62
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	cd bf       	out	0x3d, r28	; 61
    switch (c) {
 5d4:	89 30       	cpi	r24, 0x09	; 9
 5d6:	09 f1       	breq	.+66     	; 0x61a <lcd_putc+0x72>
 5d8:	18 f4       	brcc	.+6      	; 0x5e0 <lcd_putc+0x38>
 5da:	88 30       	cpi	r24, 0x08	; 8
 5dc:	39 f0       	breq	.+14     	; 0x5ec <lcd_putc+0x44>
 5de:	53 c0       	rjmp	.+166    	; 0x686 <lcd_putc+0xde>
 5e0:	8a 30       	cpi	r24, 0x0A	; 10
 5e2:	f1 f1       	breq	.+124    	; 0x660 <lcd_putc+0xb8>
 5e4:	8d 30       	cpi	r24, 0x0D	; 13
 5e6:	09 f4       	brne	.+2      	; 0x5ea <lcd_putc+0x42>
 5e8:	48 c0       	rjmp	.+144    	; 0x67a <lcd_putc+0xd2>
 5ea:	4d c0       	rjmp	.+154    	; 0x686 <lcd_putc+0xde>
        case '\b':
            // backspace
            lcd_gotoxy(cursorPosition.x-charMode, cursorPosition.y);
 5ec:	06 e1       	ldi	r16, 0x16	; 22
 5ee:	11 e0       	ldi	r17, 0x01	; 1
 5f0:	d8 01       	movw	r26, r16
 5f2:	8c 91       	ld	r24, X
 5f4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 5f8:	11 96       	adiw	r26, 0x01	; 1
 5fa:	6c 91       	ld	r22, X
 5fc:	89 1b       	sub	r24, r25
 5fe:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
            lcd_putc(' ');
 602:	80 e2       	ldi	r24, 0x20	; 32
 604:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <lcd_putc>
            lcd_gotoxy(cursorPosition.x-charMode, cursorPosition.y);
 608:	f8 01       	movw	r30, r16
 60a:	80 81       	ld	r24, Z
 60c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 610:	61 81       	ldd	r22, Z+1	; 0x01
 612:	89 1b       	sub	r24, r25
 614:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
            break;
 618:	65 c1       	rjmp	.+714    	; 0x8e4 <lcd_putc+0x33c>
        case '\t':
            // tab
            if( (cursorPosition.x+charMode*4) < (DISPLAY_WIDTH/ sizeof(FONT[0])-charMode*4) ){
 61a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 61e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 622:	29 2f       	mov	r18, r25
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	22 0f       	add	r18, r18
 628:	33 1f       	adc	r19, r19
 62a:	22 0f       	add	r18, r18
 62c:	33 1f       	adc	r19, r19
 62e:	b9 01       	movw	r22, r18
 630:	68 0f       	add	r22, r24
 632:	71 1d       	adc	r23, r1
 634:	45 e1       	ldi	r20, 0x15	; 21
 636:	50 e0       	ldi	r21, 0x00	; 0
 638:	da 01       	movw	r26, r20
 63a:	a2 1b       	sub	r26, r18
 63c:	b3 0b       	sbc	r27, r19
 63e:	6a 17       	cp	r22, r26
 640:	7b 07       	cpc	r23, r27
 642:	40 f4       	brcc	.+16     	; 0x654 <lcd_putc+0xac>
                lcd_gotoxy(cursorPosition.x+charMode*4, cursorPosition.y);
 644:	99 0f       	add	r25, r25
 646:	99 0f       	add	r25, r25
 648:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <__data_end+0x1>
 64c:	89 0f       	add	r24, r25
 64e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
 652:	48 c1       	rjmp	.+656    	; 0x8e4 <lcd_putc+0x33c>
            }else{
                lcd_gotoxy(DISPLAY_WIDTH/ sizeof(FONT[0]), cursorPosition.y);
 654:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <__data_end+0x1>
 658:	85 e1       	ldi	r24, 0x15	; 21
 65a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
 65e:	42 c1       	rjmp	.+644    	; 0x8e4 <lcd_putc+0x33c>
            }
            break;
        case '\n':
            // linefeed
            if(cursorPosition.y < (DISPLAY_HEIGHT/8-1)){
 660:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <__data_end+0x1>
 664:	87 30       	cpi	r24, 0x07	; 7
 666:	08 f0       	brcs	.+2      	; 0x66a <lcd_putc+0xc2>
 668:	3d c1       	rjmp	.+634    	; 0x8e4 <lcd_putc+0x33c>
                lcd_gotoxy(cursorPosition.x, cursorPosition.y+charMode);
 66a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 66e:	68 0f       	add	r22, r24
 670:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 674:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
 678:	35 c1       	rjmp	.+618    	; 0x8e4 <lcd_putc+0x33c>
            }
            break;
        case '\r':
            // carrige return
            lcd_gotoxy(0, cursorPosition.y);
 67a:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <__data_end+0x1>
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
            break;
 684:	2f c1       	rjmp	.+606    	; 0x8e4 <lcd_putc+0x33c>
        default:
            // char doesn't fit in line
            if( (cursorPosition.x >= DISPLAY_WIDTH-sizeof(FONT[0])) || (c < ' ') ) break;
 686:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end>
 68a:	aa 37       	cpi	r26, 0x7A	; 122
 68c:	08 f0       	brcs	.+2      	; 0x690 <lcd_putc+0xe8>
 68e:	2a c1       	rjmp	.+596    	; 0x8e4 <lcd_putc+0x33c>
 690:	80 32       	cpi	r24, 0x20	; 32
 692:	08 f4       	brcc	.+2      	; 0x696 <lcd_putc+0xee>
 694:	27 c1       	rjmp	.+590    	; 0x8e4 <lcd_putc+0x33c>
            // mapping char
            c -= ' ';
 696:	80 52       	subi	r24, 0x20	; 32
            if (c >= pgm_read_byte(&special_char[0][1]) ) {
 698:	49 e6       	ldi	r20, 0x69	; 105
 69a:	50 e0       	ldi	r21, 0x00	; 0
 69c:	fa 01       	movw	r30, r20
 69e:	94 91       	lpm	r25, Z
 6a0:	89 17       	cp	r24, r25
 6a2:	68 f1       	brcs	.+90     	; 0x6fe <lcd_putc+0x156>
                char temp = c;
                c = 0xff;
                for (uint8_t i=0; pgm_read_byte(&special_char[i][1]) != 0xff; i++) {
 6a4:	94 91       	lpm	r25, Z
 6a6:	9f 3f       	cpi	r25, 0xFF	; 255
 6a8:	09 f4       	brne	.+2      	; 0x6ac <lcd_putc+0x104>
 6aa:	1c c1       	rjmp	.+568    	; 0x8e4 <lcd_putc+0x33c>
                    if ( pgm_read_byte(&special_char[i][0])-' ' == temp ) {
 6ac:	e8 e6       	ldi	r30, 0x68	; 104
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	24 91       	lpm	r18, Z
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	20 52       	subi	r18, 0x20	; 32
 6b8:	31 09       	sbc	r19, r1
 6ba:	28 17       	cp	r18, r24
 6bc:	39 07       	cpc	r19, r25
 6be:	69 f0       	breq	.+26     	; 0x6da <lcd_putc+0x132>
 6c0:	60 e0       	ldi	r22, 0x00	; 0
 6c2:	10 c0       	rjmp	.+32     	; 0x6e4 <lcd_putc+0x13c>
 6c4:	f9 01       	movw	r30, r18
 6c6:	ee 0f       	add	r30, r30
 6c8:	ff 1f       	adc	r31, r31
 6ca:	e8 59       	subi	r30, 0x98	; 152
 6cc:	ff 4f       	sbci	r31, 0xFF	; 255
 6ce:	e4 91       	lpm	r30, Z
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	b0 97       	sbiw	r30, 0x20	; 32
 6d4:	e8 17       	cp	r30, r24
 6d6:	f9 07       	cpc	r31, r25
 6d8:	29 f4       	brne	.+10     	; 0x6e4 <lcd_putc+0x13c>
                        c = pgm_read_byte(&special_char[i][1]);
 6da:	fa 01       	movw	r30, r20
 6dc:	84 91       	lpm	r24, Z
                        break;
                    }
                }
                if ( c == 0xff ) break;
 6de:	8f 3f       	cpi	r24, 0xFF	; 255
 6e0:	71 f4       	brne	.+28     	; 0x6fe <lcd_putc+0x156>
 6e2:	00 c1       	rjmp	.+512    	; 0x8e4 <lcd_putc+0x33c>
            // mapping char
            c -= ' ';
            if (c >= pgm_read_byte(&special_char[0][1]) ) {
                char temp = c;
                c = 0xff;
                for (uint8_t i=0; pgm_read_byte(&special_char[i][1]) != 0xff; i++) {
 6e4:	6f 5f       	subi	r22, 0xFF	; 255
 6e6:	26 2f       	mov	r18, r22
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	a9 01       	movw	r20, r18
 6ec:	44 0f       	add	r20, r20
 6ee:	55 1f       	adc	r21, r21
 6f0:	47 59       	subi	r20, 0x97	; 151
 6f2:	5f 4f       	sbci	r21, 0xFF	; 255
 6f4:	fa 01       	movw	r30, r20
 6f6:	74 91       	lpm	r23, Z
 6f8:	7f 3f       	cpi	r23, 0xFF	; 255
 6fa:	21 f7       	brne	.-56     	; 0x6c4 <lcd_putc+0x11c>
 6fc:	f3 c0       	rjmp	.+486    	; 0x8e4 <lcd_putc+0x33c>
                    displayBuffer[cursorPosition.y][cursorPosition.x+i] =pgm_read_byte(&(FONT[(uint8_t)c][i]));
                }
                cursorPosition.x += sizeof(FONT[0]);
            }
#elif defined TEXTMODE
            if (charMode == DOUBLESIZE) {
 6fe:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 702:	92 30       	cpi	r25, 0x02	; 2
 704:	09 f0       	breq	.+2      	; 0x708 <lcd_putc+0x160>
 706:	c7 c0       	rjmp	.+398    	; 0x896 <lcd_putc+0x2ee>
                uint16_t doubleChar[sizeof(FONT[0])];
                uint8_t dChar;
                if ((cursorPosition.x+2*sizeof(FONT[0]))>DISPLAY_WIDTH) break;
 708:	2a 2f       	mov	r18, r26
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	24 5f       	subi	r18, 0xF4	; 244
 70e:	3f 4f       	sbci	r19, 0xFF	; 255
 710:	21 38       	cpi	r18, 0x81	; 129
 712:	31 05       	cpc	r19, r1
 714:	08 f0       	brcs	.+2      	; 0x718 <lcd_putc+0x170>
 716:	e6 c0       	rjmp	.+460    	; 0x8e4 <lcd_putc+0x33c>
 718:	5e 01       	movw	r10, r28
 71a:	fd e0       	ldi	r31, 0x0D	; 13
 71c:	af 0e       	add	r10, r31
 71e:	b1 1c       	adc	r11, r1
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	fc 01       	movw	r30, r24
 724:	ee 0f       	add	r30, r30
 726:	ff 1f       	adc	r31, r31
 728:	e8 0f       	add	r30, r24
 72a:	f9 1f       	adc	r31, r25
 72c:	ee 0f       	add	r30, r30
 72e:	ff 1f       	adc	r31, r31
 730:	cf 01       	movw	r24, r30
 732:	84 58       	subi	r24, 0x84	; 132
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	3c 01       	movw	r6, r24
 738:	4e 01       	movw	r8, r28
 73a:	99 e1       	ldi	r25, 0x19	; 25
 73c:	89 0e       	add	r8, r25
 73e:	91 1c       	adc	r9, r1
 740:	65 01       	movw	r12, r10
                    doubleChar[i] = 0;
                    dChar = pgm_read_byte(&(FONT[(uint8_t)c][i]));
                    for (uint8_t j=0; j<8; j++) {
                        if ((dChar & (1 << j))) {
                            doubleChar[i] |= (1 << (j*2));
                            doubleChar[i] |= (1 << ((j*2)+1));
 742:	ee 24       	eor	r14, r14
 744:	e3 94       	inc	r14
 746:	f1 2c       	mov	r15, r1
 748:	86 01       	movw	r16, r12
                uint16_t doubleChar[sizeof(FONT[0])];
                uint8_t dChar;
                if ((cursorPosition.x+2*sizeof(FONT[0]))>DISPLAY_WIDTH) break;
                
                for (uint8_t i=0; i < sizeof(FONT[0]); i++) {
                    doubleChar[i] = 0;
 74a:	d6 01       	movw	r26, r12
 74c:	1d 92       	st	X+, r1
 74e:	1c 92       	st	X, r1
                    dChar = pgm_read_byte(&(FONT[(uint8_t)c][i]));
 750:	f3 01       	movw	r30, r6
 752:	a4 91       	lpm	r26, Z
 754:	21 e0       	ldi	r18, 0x01	; 1
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	90 e0       	ldi	r25, 0x00	; 0
                    for (uint8_t j=0; j<8; j++) {
                        if ((dChar & (1 << j))) {
 75c:	b0 e0       	ldi	r27, 0x00	; 0
 75e:	ad 01       	movw	r20, r26
 760:	08 2e       	mov	r0, r24
 762:	02 c0       	rjmp	.+4      	; 0x768 <lcd_putc+0x1c0>
 764:	55 95       	asr	r21
 766:	47 95       	ror	r20
 768:	0a 94       	dec	r0
 76a:	e2 f7       	brpl	.-8      	; 0x764 <lcd_putc+0x1bc>
 76c:	40 ff       	sbrs	r20, 0
 76e:	1b c0       	rjmp	.+54     	; 0x7a6 <lcd_putc+0x1fe>
                            doubleChar[i] |= (1 << (j*2));
                            doubleChar[i] |= (1 << ((j*2)+1));
 770:	f8 01       	movw	r30, r16
 772:	60 81       	ld	r22, Z
 774:	71 81       	ldd	r23, Z+1	; 0x01
 776:	a7 01       	movw	r20, r14
 778:	02 2e       	mov	r0, r18
 77a:	02 c0       	rjmp	.+4      	; 0x780 <lcd_putc+0x1d8>
 77c:	44 0f       	add	r20, r20
 77e:	55 1f       	adc	r21, r21
 780:	0a 94       	dec	r0
 782:	e2 f7       	brpl	.-8      	; 0x77c <lcd_putc+0x1d4>
 784:	64 2b       	or	r22, r20
 786:	75 2b       	or	r23, r21
 788:	ac 01       	movw	r20, r24
 78a:	44 0f       	add	r20, r20
 78c:	55 1f       	adc	r21, r21
 78e:	f7 01       	movw	r30, r14
 790:	02 c0       	rjmp	.+4      	; 0x796 <lcd_putc+0x1ee>
 792:	ee 0f       	add	r30, r30
 794:	ff 1f       	adc	r31, r31
 796:	4a 95       	dec	r20
 798:	e2 f7       	brpl	.-8      	; 0x792 <lcd_putc+0x1ea>
 79a:	af 01       	movw	r20, r30
 79c:	46 2b       	or	r20, r22
 79e:	57 2b       	or	r21, r23
 7a0:	f8 01       	movw	r30, r16
 7a2:	51 83       	std	Z+1, r21	; 0x01
 7a4:	40 83       	st	Z, r20
 7a6:	01 96       	adiw	r24, 0x01	; 1
 7a8:	2e 5f       	subi	r18, 0xFE	; 254
 7aa:	3f 4f       	sbci	r19, 0xFF	; 255
                if ((cursorPosition.x+2*sizeof(FONT[0]))>DISPLAY_WIDTH) break;
                
                for (uint8_t i=0; i < sizeof(FONT[0]); i++) {
                    doubleChar[i] = 0;
                    dChar = pgm_read_byte(&(FONT[(uint8_t)c][i]));
                    for (uint8_t j=0; j<8; j++) {
 7ac:	88 30       	cpi	r24, 0x08	; 8
 7ae:	91 05       	cpc	r25, r1
 7b0:	b1 f6       	brne	.-84     	; 0x75e <lcd_putc+0x1b6>
 7b2:	f2 e0       	ldi	r31, 0x02	; 2
 7b4:	cf 0e       	add	r12, r31
 7b6:	d1 1c       	adc	r13, r1
 7b8:	5f ef       	ldi	r21, 0xFF	; 255
 7ba:	65 1a       	sub	r6, r21
 7bc:	75 0a       	sbc	r7, r21
            if (charMode == DOUBLESIZE) {
                uint16_t doubleChar[sizeof(FONT[0])];
                uint8_t dChar;
                if ((cursorPosition.x+2*sizeof(FONT[0]))>DISPLAY_WIDTH) break;
                
                for (uint8_t i=0; i < sizeof(FONT[0]); i++) {
 7be:	8c 14       	cp	r8, r12
 7c0:	9d 04       	cpc	r9, r13
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <lcd_putc+0x21e>
 7c4:	c1 cf       	rjmp	.-126    	; 0x748 <lcd_putc+0x1a0>
 7c6:	f5 01       	movw	r30, r10
 7c8:	20 e0       	ldi	r18, 0x00	; 0
 7ca:	30 e0       	ldi	r19, 0x00	; 0
                }
                uint8_t data[sizeof(FONT[0])*2];
                for (uint8_t i = 0; i < sizeof(FONT[0]); i++)
                {
                    // print font to ram, print 6 columns
                    data[i<<1]=(doubleChar[i] & 0xff);
 7cc:	c9 01       	movw	r24, r18
 7ce:	88 0f       	add	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	40 81       	ld	r20, Z
 7d4:	32 96       	adiw	r30, 0x02	; 2
 7d6:	a1 e0       	ldi	r26, 0x01	; 1
 7d8:	b0 e0       	ldi	r27, 0x00	; 0
 7da:	ac 0f       	add	r26, r28
 7dc:	bd 1f       	adc	r27, r29
 7de:	a8 0f       	add	r26, r24
 7e0:	b9 1f       	adc	r27, r25
 7e2:	4c 93       	st	X, r20
                    data[(i<<1)+1]=(doubleChar[i] & 0xff);
 7e4:	a2 e0       	ldi	r26, 0x02	; 2
 7e6:	b0 e0       	ldi	r27, 0x00	; 0
 7e8:	ac 0f       	add	r26, r28
 7ea:	bd 1f       	adc	r27, r29
 7ec:	a8 0f       	add	r26, r24
 7ee:	b9 1f       	adc	r27, r25
 7f0:	4c 93       	st	X, r20
 7f2:	2f 5f       	subi	r18, 0xFF	; 255
 7f4:	3f 4f       	sbci	r19, 0xFF	; 255
                            doubleChar[i] |= (1 << ((j*2)+1));
                        }
                    }
                }
                uint8_t data[sizeof(FONT[0])*2];
                for (uint8_t i = 0; i < sizeof(FONT[0]); i++)
 7f6:	26 30       	cpi	r18, 0x06	; 6
 7f8:	31 05       	cpc	r19, r1
 7fa:	41 f7       	brne	.-48     	; 0x7cc <lcd_putc+0x224>
                {
                    // print font to ram, print 6 columns
                    data[i<<1]=(doubleChar[i] & 0xff);
                    data[(i<<1)+1]=(doubleChar[i] & 0xff);
                }
                lcd_data(data, sizeof(FONT[0])*2);
 7fc:	6c e0       	ldi	r22, 0x0C	; 12
 7fe:	70 e0       	ldi	r23, 0x00	; 0
 800:	ce 01       	movw	r24, r28
 802:	01 96       	adiw	r24, 0x01	; 1
 804:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_data>
                
#if defined (SSD1306) || defined (SSD1309)
                uint8_t commandSequence[] = {0xb0+cursorPosition.y+1,
 808:	e6 e1       	ldi	r30, 0x16	; 22
 80a:	f1 e0       	ldi	r31, 0x01	; 1
 80c:	81 81       	ldd	r24, Z+1	; 0x01
 80e:	8f 54       	subi	r24, 0x4F	; 79
 810:	89 8f       	std	Y+25, r24	; 0x19
 812:	81 e2       	ldi	r24, 0x21	; 33
 814:	8a 8f       	std	Y+26, r24	; 0x1a
 816:	80 81       	ld	r24, Z
 818:	8b 8f       	std	Y+27, r24	; 0x1b
 81a:	8f e7       	ldi	r24, 0x7F	; 127
 81c:	8c 8f       	std	Y+28, r24	; 0x1c
                    0x21,
                    0x00+((2+cursorPosition.x) & (0x0f)),
                    0x10+( ((2+cursorPosition.x) & (0xf0)) >> 4 ),
                    0x7f};
#endif
                lcd_command(commandSequence, sizeof(commandSequence));
 81e:	64 e0       	ldi	r22, 0x04	; 4
 820:	ce 01       	movw	r24, r28
 822:	49 96       	adiw	r24, 0x19	; 25
 824:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_command>
 828:	20 e0       	ldi	r18, 0x00	; 0
 82a:	30 e0       	ldi	r19, 0x00	; 0
                
                for (uint8_t i = 0; i < sizeof(FONT[0]); i++)
                {
                    // print font to ram, print 6 columns
                    data[i<<1]=(doubleChar[i] >> 8);
 82c:	c9 01       	movw	r24, r18
 82e:	88 0f       	add	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	d5 01       	movw	r26, r10
 834:	11 96       	adiw	r26, 0x01	; 1
 836:	4c 91       	ld	r20, X
 838:	b2 e0       	ldi	r27, 0x02	; 2
 83a:	ab 0e       	add	r10, r27
 83c:	b1 1c       	adc	r11, r1
 83e:	e1 e0       	ldi	r30, 0x01	; 1
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	ec 0f       	add	r30, r28
 844:	fd 1f       	adc	r31, r29
 846:	e8 0f       	add	r30, r24
 848:	f9 1f       	adc	r31, r25
 84a:	40 83       	st	Z, r20
                    data[(i<<1)+1]=(doubleChar[i] >> 8);
 84c:	e2 e0       	ldi	r30, 0x02	; 2
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	ec 0f       	add	r30, r28
 852:	fd 1f       	adc	r31, r29
 854:	e8 0f       	add	r30, r24
 856:	f9 1f       	adc	r31, r25
 858:	40 83       	st	Z, r20
 85a:	2f 5f       	subi	r18, 0xFF	; 255
 85c:	3f 4f       	sbci	r19, 0xFF	; 255
                    0x10+( ((2+cursorPosition.x) & (0xf0)) >> 4 ),
                    0x7f};
#endif
                lcd_command(commandSequence, sizeof(commandSequence));
                
                for (uint8_t i = 0; i < sizeof(FONT[0]); i++)
 85e:	26 30       	cpi	r18, 0x06	; 6
 860:	31 05       	cpc	r19, r1
 862:	21 f7       	brne	.-56     	; 0x82c <lcd_putc+0x284>
                {
                    // print font to ram, print 6 columns
                    data[i<<1]=(doubleChar[i] >> 8);
                    data[(i<<1)+1]=(doubleChar[i] >> 8);
                }
                lcd_data(data, sizeof(FONT[0])*2);
 864:	6c e0       	ldi	r22, 0x0C	; 12
 866:	70 e0       	ldi	r23, 0x00	; 0
 868:	ce 01       	movw	r24, r28
 86a:	01 96       	adiw	r24, 0x01	; 1
 86c:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_data>
                
                commandSequence[0] = 0xb0+cursorPosition.y;
 870:	06 e1       	ldi	r16, 0x16	; 22
 872:	11 e0       	ldi	r17, 0x01	; 1
 874:	f8 01       	movw	r30, r16
 876:	81 81       	ldd	r24, Z+1	; 0x01
 878:	80 55       	subi	r24, 0x50	; 80
 87a:	89 8f       	std	Y+25, r24	; 0x19
#if defined (SSD1306) || defined (SSD1309)
                commandSequence[2] = cursorPosition.x+(2*sizeof(FONT[0]));
 87c:	80 81       	ld	r24, Z
 87e:	84 5f       	subi	r24, 0xF4	; 244
 880:	8b 8f       	std	Y+27, r24	; 0x1b
#elif defined SH1106
                commandSequence[2] = 0x00+((2+cursorPosition.x+(2*sizeof(FONT[0]))) & (0x0f));
                commandSequence[3] = 0x10+( ((2+cursorPosition.x+(2*sizeof(FONT[0]))) & (0xf0)) >> 4 );
#endif
                lcd_command(commandSequence, sizeof(commandSequence));
 882:	64 e0       	ldi	r22, 0x04	; 4
 884:	ce 01       	movw	r24, r28
 886:	49 96       	adiw	r24, 0x19	; 25
 888:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_command>
                cursorPosition.x += sizeof(FONT[0])*2;
 88c:	d8 01       	movw	r26, r16
 88e:	8c 91       	ld	r24, X
 890:	84 5f       	subi	r24, 0xF4	; 244
 892:	8c 93       	st	X, r24
 894:	27 c0       	rjmp	.+78     	; 0x8e4 <lcd_putc+0x33c>
            } else {
                uint8_t data[sizeof(FONT[0])];
                if ((cursorPosition.x+sizeof(FONT[0]))>DISPLAY_WIDTH) break;
 896:	2a 2f       	mov	r18, r26
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	2a 5f       	subi	r18, 0xFA	; 250
 89c:	3f 4f       	sbci	r19, 0xFF	; 255
 89e:	21 38       	cpi	r18, 0x81	; 129
 8a0:	31 05       	cpc	r19, r1
 8a2:	00 f5       	brcc	.+64     	; 0x8e4 <lcd_putc+0x33c>
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	fc 01       	movw	r30, r24
 8a8:	ee 0f       	add	r30, r30
 8aa:	ff 1f       	adc	r31, r31
 8ac:	e8 0f       	add	r30, r24
 8ae:	f9 1f       	adc	r31, r25
 8b0:	ee 0f       	add	r30, r30
 8b2:	ff 1f       	adc	r31, r31
 8b4:	e4 58       	subi	r30, 0x84	; 132
 8b6:	ff 4f       	sbci	r31, 0xFF	; 255
 8b8:	de 01       	movw	r26, r28
 8ba:	11 96       	adiw	r26, 0x01	; 1
 8bc:	9e 01       	movw	r18, r28
 8be:	29 5f       	subi	r18, 0xF9	; 249
 8c0:	3f 4f       	sbci	r19, 0xFF	; 255
                
            	for (uint8_t i = 0; i < sizeof(FONT[0]); i++)
                {
                    // print font to ram, print 6 columns
                    data[i]=(pgm_read_byte(&(FONT[(uint8_t)c][i])));
 8c2:	84 91       	lpm	r24, Z
 8c4:	8d 93       	st	X+, r24
 8c6:	31 96       	adiw	r30, 0x01	; 1
                cursorPosition.x += sizeof(FONT[0])*2;
            } else {
                uint8_t data[sizeof(FONT[0])];
                if ((cursorPosition.x+sizeof(FONT[0]))>DISPLAY_WIDTH) break;
                
            	for (uint8_t i = 0; i < sizeof(FONT[0]); i++)
 8c8:	a2 17       	cp	r26, r18
 8ca:	b3 07       	cpc	r27, r19
 8cc:	d1 f7       	brne	.-12     	; 0x8c2 <lcd_putc+0x31a>
                {
                    // print font to ram, print 6 columns
                    data[i]=(pgm_read_byte(&(FONT[(uint8_t)c][i])));
                }
                lcd_data(data, sizeof(FONT[0]));
 8ce:	66 e0       	ldi	r22, 0x06	; 6
 8d0:	70 e0       	ldi	r23, 0x00	; 0
 8d2:	ce 01       	movw	r24, r28
 8d4:	01 96       	adiw	r24, 0x01	; 1
 8d6:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_data>
                cursorPosition.x += sizeof(FONT[0]);
 8da:	e6 e1       	ldi	r30, 0x16	; 22
 8dc:	f1 e0       	ldi	r31, 0x01	; 1
 8de:	80 81       	ld	r24, Z
 8e0:	8a 5f       	subi	r24, 0xFA	; 250
 8e2:	80 83       	st	Z, r24
            }
#endif
            break;
    }
    
}
 8e4:	6c 96       	adiw	r28, 0x1c	; 28
 8e6:	0f b6       	in	r0, 0x3f	; 63
 8e8:	f8 94       	cli
 8ea:	de bf       	out	0x3e, r29	; 62
 8ec:	0f be       	out	0x3f, r0	; 63
 8ee:	cd bf       	out	0x3d, r28	; 61
 8f0:	df 91       	pop	r29
 8f2:	cf 91       	pop	r28
 8f4:	1f 91       	pop	r17
 8f6:	0f 91       	pop	r16
 8f8:	ff 90       	pop	r15
 8fa:	ef 90       	pop	r14
 8fc:	df 90       	pop	r13
 8fe:	cf 90       	pop	r12
 900:	bf 90       	pop	r11
 902:	af 90       	pop	r10
 904:	9f 90       	pop	r9
 906:	8f 90       	pop	r8
 908:	7f 90       	pop	r7
 90a:	6f 90       	pop	r6
 90c:	08 95       	ret

0000090e <lcd_charMode>:
void lcd_charMode(uint8_t mode){
    charMode = mode;
 90e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 912:	08 95       	ret

00000914 <lcd_puts>:
}
void lcd_puts(const char* s){
 914:	cf 93       	push	r28
 916:	df 93       	push	r29
 918:	ec 01       	movw	r28, r24
    while (*s) {
 91a:	88 81       	ld	r24, Y
 91c:	88 23       	and	r24, r24
 91e:	31 f0       	breq	.+12     	; 0x92c <lcd_puts+0x18>
 920:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(*s++);
 922:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <lcd_putc>
}
void lcd_charMode(uint8_t mode){
    charMode = mode;
}
void lcd_puts(const char* s){
    while (*s) {
 926:	89 91       	ld	r24, Y+
 928:	81 11       	cpse	r24, r1
 92a:	fb cf       	rjmp	.-10     	; 0x922 <lcd_puts+0xe>
        lcd_putc(*s++);
    }
}
 92c:	df 91       	pop	r29
 92e:	cf 91       	pop	r28
 930:	08 95       	ret

00000932 <main>:
//****main.c****//
#include "lcd.h"

int main(void){
	
	lcd_init(LCD_DISP_ON);
 932:	8f ea       	ldi	r24, 0xAF	; 175
 934:	0e 94 95 02 	call	0x52a	; 0x52a <lcd_init>
	lcd_clrscr();
 938:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_clrscr>
	lcd_set_contrast(0x00);
 93c:	80 e0       	ldi	r24, 0x00	; 0
 93e:	0e 94 c2 02 	call	0x584	; 0x584 <lcd_set_contrast>
	lcd_gotoxy(4,1);
 942:	61 e0       	ldi	r22, 0x01	; 1
 944:	84 e0       	ldi	r24, 0x04	; 4
 946:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("Normal Size");
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	91 e0       	ldi	r25, 0x01	; 1
 94e:	0e 94 8a 04 	call	0x914	; 0x914 <lcd_puts>
	lcd_charMode(DOUBLESIZE);
 952:	82 e0       	ldi	r24, 0x02	; 2
 954:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_charMode>
	lcd_gotoxy(0,4);
 958:	64 e0       	ldi	r22, 0x04	; 4
 95a:	80 e0       	ldi	r24, 0x00	; 0
 95c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("  OBAID ");
 960:	8d e0       	ldi	r24, 0x0D	; 13
 962:	91 e0       	ldi	r25, 0x01	; 1
 964:	0e 94 8a 04 	call	0x914	; 0x914 <lcd_puts>
	lcd_charMode(NORMALSIZE);
 968:	81 e0       	ldi	r24, 0x01	; 1
 96a:	0e 94 87 04 	call	0x90e	; 0x90e <lcd_charMode>
 96e:	ff cf       	rjmp	.-2      	; 0x96e <main+0x3c>

00000970 <_exit>:
 970:	f8 94       	cli

00000972 <__stop_program>:
 972:	ff cf       	rjmp	.-2      	; 0x972 <__stop_program>
